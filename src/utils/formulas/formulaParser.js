/* eslint-disable no-void */
/* eslint-disable no-control-regex */
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

'use strict'

function peg$subclass (child, parent) {
  function Ctor () { this.constructor = child }
  Ctor.prototype = parent.prototype
  child.prototype = new Ctor()
}

function peg$SyntaxError (message, expected, found, location) {
  this.message = message
  this.expected = expected
  this.found = found
  this.location = location
  this.name = 'SyntaxError'

  if (typeof Error.captureStackTrace === 'function') {
    Error.captureStackTrace(this, peg$SyntaxError)
  }
}

peg$subclass(peg$SyntaxError, Error)

peg$SyntaxError.buildMessage = function (expected, found) {
  const DESCRIBE_EXPECTATION_FNS = {
    literal: function (expectation) {
      return '"' + literalEscape(expectation.text) + '"'
    },

    class: function (expectation) {
      let escapedParts = ''
      let i

      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts += expectation.parts[i] instanceof Array
          ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
          : classEscape(expectation.parts[i])
      }

      return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']'
    },

    any: function (expectation) {
      return 'any character'
    },

    end: function (expectation) {
      return 'end of input'
    },

    other: function (expectation) {
      return expectation.description
    },
  }

  function hex (ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase()
  }

  function literalEscape (s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch) })
  }

  function classEscape (s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g, '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch) })
  }

  function describeExpectation (expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
  }

  function describeExpected (expected) {
    const descriptions = new Array(expected.length)
    let i; let j

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i])
    }

    descriptions.sort()

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i]
          j++
        }
      }
      descriptions.length = j
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0]

      case 2:
        return descriptions[0] + ' or ' + descriptions[1]

      default:
        return descriptions.slice(0, -1).join(', ') +
          ', or ' +
          descriptions[descriptions.length - 1]
    }
  }

  function describeFound (found) {
    return found ? '"' + literalEscape(found) + '"' : 'end of input'
  }

  return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.'
}

function peg$parse (input, options) {
  options = options !== void 0 ? options : {}

  const peg$FAILED = {}

  const peg$startRuleFunctions = { start: peg$parsestart }
  let peg$startRuleFunction = peg$parsestart

  const peg$c0 = /^[A-Z]/
  const peg$c1 = peg$classExpectation([['A', 'Z']], false, false)
  const peg$c2 = '.'
  const peg$c3 = peg$literalExpectation('.', false)
  const peg$c4 = /^[a-zA-Z0-9]/
  const peg$c5 = peg$classExpectation([['a', 'z'], ['A', 'Z'], ['0', '9']], false, false)
  const peg$c6 = '('
  const peg$c7 = peg$literalExpectation('(', false)
  const peg$c8 = ')'
  const peg$c9 = peg$literalExpectation(')', false)
  const peg$c10 = function (category, name, args) {
    if (functions[category] && functions[category][name]) {
      // Check type parameters
      if (Array.isArray(functions[category][name].params)) {
        let docParamIndex = 0
        let realParamIndex = 0

        let arrayParamIsCorrectOnce = false

        // Loop on documentation parameters
        while (functions[category][name].params[docParamIndex]) {
          const docParam = functions[category][name].params[docParamIndex]

          // Check if the doc parameter is an array (related parameters)
          if (Array.isArray(docParam) && docParam.length > 0) {
            let checkFollowingDocParam = false
            // Check if the related parameters are correct
            for (let relatedParamIndex = 0; relatedParamIndex < docParam.length; relatedParamIndex++) {
              const realParam = args && args[realParamIndex + relatedParamIndex]?.type
              // If the type is incorrect
              if (!checkParamsTypes(docParam[relatedParamIndex].type, realParam)) {
                if (!arrayParamIsCorrectOnce) {
                  // The parameters are required at least once
                  error('invalid argument')
                } else {
                  // maybe it corresponds to the following doc parameter
                  docParamIndex += 1
                  checkFollowingDocParam = true
                  arrayParamIsCorrectOnce = false
                  break
                }
              } else {
                // Indicate that it is valid once
                arrayParamIsCorrectOnce = true
              }
            }
            if (!checkFollowingDocParam) {
              // If the related parameters are correct, we will check the following real parameters
              realParamIndex += docParam.length
            }
          } else {
            const realParam = args && args[realParamIndex]?.type

            // The current documentation parameter is required
            if (docParam.required !== false) {
              if (!realParam) {
                error(`an argument is missing (${docParam.name})`)
              }
              if (checkParamsTypes(docParam.type, realParam)) {
                docParamIndex += 1
                realParamIndex += 1
              } else {
                error(`invalid argument (${docParam.name}) (required not good type).`)
              }
            }
            // The current documentation parameter is not required and not specified
            else if (!realParam) {
              break
            }
            // The current documentation parameter is specified and multiple but not required
            else if (docParam.multiple === true) {
              if (checkParamsTypes(docParam.type, realParam)) {
                realParamIndex += 1
              } else {
                docParamIndex += 1
              }
            }
            // The current documentation parameter is specified but neither required nor multiple
            else {
              if (checkParamsTypes(docParam.type, realParam)) {
                docParamIndex += 1
                realParamIndex += 1
              } else {
                error(`invalid argument (${docParam.name}) (not required not multiple not good type).`)
              }
            }
          }
        }

        // Invalid number of parameters
        if (args && args.length !== realParamIndex) {
          error('invalid arguments (nb).')
        }
      }

      // Return the type and the value related to the function
      if (functions[category][name].pgsql && functions[category][name].returnType) {
        return {
          value: `(${Array.isArray(args) ? functions[category][name].pgsql(...args.map(arg => arg.value)) : functions[category][name].pgsql()})`,
          type: functions[category][name].returnType,
        }
      } else {
        error(`the function ${category}.${name} isn't well configured.`)
      }
    } else {
      error(`the function ${category}.${name} doesn't exist.`)
    }
  }
  const peg$c11 = ','
  const peg$c12 = peg$literalExpectation(',', false)
  const peg$c13 = function (first, arg) { return arg }
  const peg$c14 = function (first, rest) {
    rest.unshift(first)
    return rest || []
  }
  const peg$c15 = /^[a-zA-Z]/
  const peg$c16 = peg$classExpectation([['a', 'z'], ['A', 'Z']], false, false)
  const peg$c17 = /^[0-9]/
  const peg$c18 = peg$classExpectation([['0', '9']], false, false)
  const peg$c19 = "'"
  const peg$c20 = peg$literalExpectation("'", false)
  const peg$c21 = function (currentString) { return { type: columnsTypes.STRING, value: currentString } }
  const peg$c22 = '\\'
  const peg$c23 = peg$literalExpectation('\\', false)
  const peg$c24 = peg$anyExpectation()
  const peg$c25 = '\\"'
  const peg$c26 = peg$literalExpectation('\\"', false)
  const peg$c27 = function () { return "\'" }
  const peg$c28 = '-'
  const peg$c29 = peg$literalExpectation('-', false)
  const peg$c30 = function (currentInteger) { return { type: columnsTypes.NUMBER, value: currentInteger } }
  const peg$c31 = function (currentDecimal) { return { type: columnsTypes.FLOAT, value: currentDecimal } }
  const peg$c32 = 'COLUMN.'
  const peg$c33 = peg$literalExpectation('COLUMN.', false)
  const peg$c34 = function (name) {
    const currentColumn = columns[name]
    if (!currentColumn) error('One column is invalid.')

    // Format the column name to be used as SQL placeholder
    let value = `:${name.replace(/-/g, '_')}:`

    // For a SINGLE_SELECT column, we want to use the label of the current option instead of its key
    if (currentColumn.settings.formula_type_id === columnsTypes.SINGLE_SELECT) {
      const options = currentColumn.settings.values
      const optionsRemapped = Object.keys(options).reduce((acc, currentKeyOption) => {
        acc[currentKeyOption] = options[currentKeyOption].label
        return acc
      }, {})
      const optionsJsonString = JSON.stringify(optionsRemapped)
      value = `('${optionsJsonString}'::json->>${value})`
    }
    return { type: columns[name].settings.formula_type_id, value }
  }
  const peg$c35 = peg$otherExpectation('optionalWhitespace')
  const peg$c36 = /^[" "\t\n\r]/
  const peg$c37 = peg$classExpectation(['"', ' ', '"', '\t', '\n', '\r'], false, false)
  const peg$c38 = ''
  const peg$c39 = function () { error('A formula can only contains numbers, strings, functions and column names.') }

  let peg$currPos = 0
  let peg$savedPos = 0
  const peg$posDetailsCache = [{ line: 1, column: 1 }]
  let peg$maxFailPos = 0
  let peg$maxFailExpected = []
  let peg$silentFails = 0

  let peg$result

  if ('startRule' in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + '".')
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
  }

  function text () {
    return input.substring(peg$savedPos, peg$currPos)
  }

  function location () {
    return peg$computeLocation(peg$savedPos, peg$currPos)
  }

  function expected (description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location,
    )
  }

  function error (message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location)
  }

  function peg$literalExpectation (text, ignoreCase) {
    return { type: 'literal', text: text, ignoreCase: ignoreCase }
  }

  function peg$classExpectation (parts, inverted, ignoreCase) {
    return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase }
  }

  function peg$anyExpectation () {
    return { type: 'any' }
  }

  function peg$endExpectation () {
    return { type: 'end' }
  }

  function peg$otherExpectation (description) {
    return { type: 'other', description: description }
  }

  function peg$computePosDetails (pos) {
    let details = peg$posDetailsCache[pos]; let p

    if (details) {
      return details
    } else {
      p = pos - 1
      while (!peg$posDetailsCache[p]) {
        p--
      }

      details = peg$posDetailsCache[p]
      details = {
        line: details.line,
        column: details.column,
      }

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++
          details.column = 1
        } else {
          details.column++
        }

        p++
      }

      peg$posDetailsCache[pos] = details
      return details
    }
  }

  function peg$computeLocation (startPos, endPos) {
    const startPosDetails = peg$computePosDetails(startPos)
    const endPosDetails = peg$computePosDetails(endPos)

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    }
  }

  function peg$fail (expected) {
    if (peg$currPos < peg$maxFailPos) { return }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos
      peg$maxFailExpected = []
    }

    peg$maxFailExpected.push(expected)
  }

  function peg$buildSimpleError (message, location) {
    return new peg$SyntaxError(message, null, null, location)
  }

  function peg$buildStructuredError (expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location,
    )
  }

  function peg$parsestart () {
    let s0

    s0 = peg$parseexpression()

    return s0
  }

  function peg$parseexpression () {
    let s0

    s0 = peg$parsedecimal()
    if (s0 === peg$FAILED) {
      s0 = peg$parseinteger()
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring()
        if (s0 === peg$FAILED) {
          s0 = peg$parsecolumn()
          if (s0 === peg$FAILED) {
            s0 = peg$parsefunction()
            if (s0 === peg$FAILED) {
              s0 = peg$parseunknown()
            }
          }
        }
      }
    }

    return s0
  }

  function peg$parsefunction () {
    let s0, s1, s2, s3, s4, s5, s6

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = []
    if (peg$c0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s3 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c1) }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        if (peg$c0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c1) }
        }
      }
    } else {
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c2
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c3) }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos
        s4 = []
        if (peg$c4.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s5 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c5) }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5)
            if (peg$c4.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c5) }
            }
          }
        } else {
          s4 = peg$FAILED
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos)
        } else {
          s3 = s4
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c6
            peg$currPos++
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c7) }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsearguments()
            if (s5 === peg$FAILED) {
              s5 = null
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c8
                peg$currPos++
              } else {
                s6 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c9) }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0
                s1 = peg$c10(s1, s3, s5)
                s0 = s1
              } else {
                peg$currPos = s0
                s0 = peg$FAILED
              }
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsearguments () {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8

    s0 = peg$currPos
    s1 = peg$parse_()
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpression()
      if (s2 !== peg$FAILED) {
        s3 = []
        s4 = peg$currPos
        s5 = peg$parse_()
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c11
            peg$currPos++
          } else {
            s6 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c12) }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_()
            if (s7 !== peg$FAILED) {
              s8 = peg$parseexpression()
              if (s8 !== peg$FAILED) {
                peg$savedPos = s4
                s5 = peg$c13(s2, s8)
                s4 = s5
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        } else {
          peg$currPos = s4
          s4 = peg$FAILED
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4)
          s4 = peg$currPos
          s5 = peg$parse_()
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c11
              peg$currPos++
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c12) }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_()
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexpression()
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s4
                  s5 = peg$c13(s2, s8)
                  s4 = s5
                } else {
                  peg$currPos = s4
                  s4 = peg$FAILED
                }
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_()
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c14(s2, s3)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parsealpha () {
    let s0

    if (peg$c15.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c16) }
    }

    return s0
  }

  function peg$parsedigit () {
    let s0

    if (peg$c17.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s0 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c18) }
    }

    return s0
  }

  function peg$parsealphanum () {
    let s0

    s0 = peg$parsealpha()
    if (s0 === peg$FAILED) {
      s0 = peg$parsedigit()
    }

    return s0
  }

  function peg$parsestring () {
    let s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$currPos
    if (input.charCodeAt(peg$currPos) === 39) {
      s3 = peg$c19
      peg$currPos++
    } else {
      s3 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c20) }
    }
    if (s3 !== peg$FAILED) {
      s4 = []
      s5 = peg$parsesingleStringChar()
      while (s5 !== peg$FAILED) {
        s4.push(s5)
        s5 = peg$parsesingleStringChar()
      }
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s5 = peg$c19
          peg$currPos++
        } else {
          s5 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c20) }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5]
          s2 = s3
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
    } else {
      peg$currPos = s2
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c21(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parsesingleStringChar () {
    let s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$currPos
    peg$silentFails++
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c19
      peg$currPos++
    } else {
      s2 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c20) }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c22
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c23) }
      }
    }
    peg$silentFails--
    if (s2 === peg$FAILED) {
      s1 = void 0
    } else {
      peg$currPos = s1
      s1 = peg$FAILED
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c24) }
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos)
      } else {
        s2 = s3
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2]
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s1 = peg$c25
        peg$currPos += 2
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c26) }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c27()
      }
      s0 = s1
    }

    return s0
  }

  function peg$parseinteger () {
    let s0, s1, s2, s3, s4, s5

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = peg$currPos
    if (input.charCodeAt(peg$currPos) === 45) {
      s3 = peg$c28
      peg$currPos++
    } else {
      s3 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c29) }
    }
    if (s3 === peg$FAILED) {
      s3 = null
    }
    if (s3 !== peg$FAILED) {
      s4 = []
      s5 = peg$parsedigit()
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5)
          s5 = peg$parsedigit()
        }
      } else {
        s4 = peg$FAILED
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4]
        s2 = s3
      } else {
        peg$currPos = s2
        s2 = peg$FAILED
      }
    } else {
      peg$currPos = s2
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c30(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parsedecimal () {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8

    s0 = peg$currPos
    s1 = peg$currPos
    s2 = []
    s3 = peg$currPos
    if (input.charCodeAt(peg$currPos) === 45) {
      s4 = peg$c28
      peg$currPos++
    } else {
      s4 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c29) }
    }
    if (s4 === peg$FAILED) {
      s4 = null
    }
    if (s4 !== peg$FAILED) {
      s5 = []
      s6 = peg$parsedigit()
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6)
          s6 = peg$parsedigit()
        }
      } else {
        s5 = peg$FAILED
      }
      if (s5 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c2
          peg$currPos++
        } else {
          s6 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c3) }
        }
        if (s6 !== peg$FAILED) {
          s7 = []
          s8 = peg$parsedigit()
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8)
              s8 = peg$parsedigit()
            }
          } else {
            s7 = peg$FAILED
          }
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
      } else {
        peg$currPos = s3
        s3 = peg$FAILED
      }
    } else {
      peg$currPos = s3
      s3 = peg$FAILED
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        s3 = peg$currPos
        if (input.charCodeAt(peg$currPos) === 45) {
          s4 = peg$c28
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c29) }
        }
        if (s4 === peg$FAILED) {
          s4 = null
        }
        if (s4 !== peg$FAILED) {
          s5 = []
          s6 = peg$parsedigit()
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6)
              s6 = peg$parsedigit()
            }
          } else {
            s5 = peg$FAILED
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c2
              peg$currPos++
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c3) }
            }
            if (s6 !== peg$FAILED) {
              s7 = []
              s8 = peg$parsedigit()
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8)
                  s8 = peg$parsedigit()
                }
              } else {
                s7 = peg$FAILED
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7]
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
      }
    } else {
      s2 = peg$FAILED
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos)
    } else {
      s1 = s2
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0
      s1 = peg$c31(s1)
    }
    s0 = s1

    return s0
  }

  function peg$parsecolumn () {
    let s0, s1, s2, s3, s4

    s0 = peg$currPos
    if (input.substr(peg$currPos, 7) === peg$c32) {
      s1 = peg$c32
      peg$currPos += 7
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c33) }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos
      s3 = []
      s4 = peg$parsealphanum()
      if (s4 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s4 = peg$c28
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c29) }
        }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4)
          s4 = peg$parsealphanum()
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c28
              peg$currPos++
            } else {
              s4 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c29) }
            }
          }
        }
      } else {
        s3 = peg$FAILED
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos)
      } else {
        s2 = s3
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c34(s2)
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parse_ () {
    let s0, s1

    peg$silentFails++
    s0 = []
    s1 = peg$parsewhitespace()
    while (s1 !== peg$FAILED) {
      s0.push(s1)
      s1 = peg$parsewhitespace()
    }
    peg$silentFails--
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c35) }
    }

    return s0
  }

  function peg$parsewhitespace () {
    let s0, s1

    s0 = []
    if (peg$c36.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos)
      peg$currPos++
    } else {
      s1 = peg$FAILED
      if (peg$silentFails === 0) { peg$fail(peg$c37) }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1)
        if (peg$c36.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s1 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c37) }
        }
      }
    } else {
      s0 = peg$FAILED
    }

    return s0
  }

  function peg$parseunknown () {
    let s0, s1, s2, s3

    s0 = peg$currPos
    s1 = peg$currPos
    peg$silentFails++
    s2 = peg$c38
    peg$silentFails--
    if (s2 === peg$FAILED) {
      s1 = void 0
    } else {
      peg$currPos = s1
      s1 = peg$FAILED
    }
    if (s1 !== peg$FAILED) {
      s2 = []
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s3 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c24) }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3)
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c24) }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c39()
        s0 = s1
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
    } else {
      peg$currPos = s0
      s0 = peg$FAILED
    }

    return s0
  }

  // Input variables
  const {
    functions = {},
    columns = {},
    columnsTypes = {},
  } = options
  // Useful functions
  function checkParamsTypes (input, output) {
    if (Array.isArray(input)) return input.includes(output)
    else return input === output
  }

  peg$result = peg$startRuleFunction()

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation())
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
    )
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse,
}
