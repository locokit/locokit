{
  "components": {
    "loginForm": {
      "email": "Email",
      "password": "Password",
      "login": "Log in",
      "loginAgain": "Log in again",
      "forgottenPassword": "Forgot your password ?",
      "signup": "Sign up",
      "error": "Unable to log in. Please contact the administrator or try again later."
    },
    "lostPasswordForm": {
      "email": "Email",
      "submit": "Submit and get a temporary link to choose your new password.",
      "error": "Something goes wrong. Please try again later."
    },
    "resetPasswordForm": {
      "password": "Password",
      "passwordCheck": "Password (check)",
      "resetSubmit": "Reset the password",
      "setSubmit": "Set the password",
      "weakLabel": "Passwords mismatch",
      "passwordMismatch": "Passwords mismatch",
      "prompt": "Enter a password",
      "rules": "Must contain at least 8 characters, 1 uppercase, 1 lowercase, 1 digit and 1 special character.",
      "passwordStrength": {
        "weak": "Weak",
        "medium": "Medium",
        "strong": "Strong"
      },
      "error": "Something goes wrong. Please try again later."
    },
    "signUpForm": {
      "email": "Email",
      "name": "Name",
      "signup": "Sign up",
      "error": "Something goes wrong. Please try again later."
    },
    "formGeneric": {
      "save": "Save",
      "cancel": "Cancel"
    }
  },
  "formulas": {
    "formula": "Formula",
    "column": "Columns",
    "categories": {
      "DATE": "Date functions",
      "LOGIC": "Logical functions",
      "NUMERIC": "Numeric functions",
      "TEXT": "Text functions"
    },
    "functions": {
      "DATE": {
        "DATEADD": "Returns the date corresponding to the date a specified number of units ('year', 'month', 'day', 'hour', 'minute' or 'second') before or after the original one.",
        "DAY": "Returns a number corresponding to the day in the month of the specified date.",
        "DAYS": "Returns the number of days between two dates.",
        "EARLIER": "Returns true is the first date is earlier than the second one, else returns false.",
        "EQUAL": "Returns true if the dates are equal, else returns false.",
        "EOMONTH": "Returns the date of the last day of the month a specified number of months before or after the original date.",
        "HOUR": "Returns a number corresponding to the hour of the specified date.",
        "LATER": "Returns true is the first date is later than the second one, else returns false.",
        "MINUTE": "Returns a number corresponding to the minutes of the specified date.",
        "MONTH": "Returns a number corresponding to the month of the specified date.",
        "MONTHS": "Returns the number of months between two dates.",
        "SECOND": "Returns a number corresponding to the seconds of the specified date.",
        "WEEKDAY": "Returns a number corresponding to the day in the week of the specified date.",
        "WEEKNUM": "Returns a number corresponding to the week number in the year of the specified date.",
        "YEAR": "Returns a number corresponding to the year of the specified date.",
        "YEARS": "Returns the number of years between two dates."
      },
      "LOGIC": {
        "AND": "Returns true if all conditions are true, else returns false.",
        "FALSE": "Returns the false logical value.",
        "IF": "Returns the first result if the condition is true, else the second one.",
        "IFS": "Returns the result associated to the first true condition.",
        "NOT": "Returns false if the condition is true, else returns true.",
        "OR": "Returns true if at least one parameter is true, else returns false.",
        "SWITCH": "Returns the result associated to the first case which is equal to the comparative value, or returns the default result.",
        "TRUE": "Returns the true logical value."
      },
      "NUMERIC": {
        "ABS": "Returns the absolute value of the specified number.",
        "AVERAGE": "Returns the average of the specified numbers.",
        "CEILING": "Rounds up a number to the nearest integer if it is a float number, else returns the specified number if it is an integer.",
        "DIVIDE": "Returns the result of the division of the specified numbers.",
        "E": "Returns the Euler number.",
        "EQUAL": "Returns true if the specified numbers are equal, else returns false.",
        "FLOOR": "Rounds down a number to the nearest integer if it is a float number, else returns the specified number if it is an integer.",
        "GREATER": "Returns true if the first number is greater than the second one, else returns false.",
        "GREATEREQ": "Returns true if the first number is greater than the second one or if the two numbers are equal, else returns false.",
        "INT": "Rounds the specified number to the nearest integer.",
        "LESS": "Returns true if the first number is lower than the second one, else returns false.",
        "LESSEQ": "Returns true if the first number is lower than the second one or if the two numbers are equal, else returns false.",
        "LOG": "Returns the result of the logarithm function applied to the number with the specified base.",
        "MAX": "Returns the largest number among the specified ones.",
        "MIN": "Returns the smallest number among the specified ones.",
        "MOD": "Returns the remainder from the division of two numbers.",
        "PI": "Returns the PI number.",
        "PRODUCT": "Returns the result of the product of numbers",
        "ROUND": "Rounds a number to a specified number of digits.",
        "SIGN": "Returns -1 if the specified number is negative, 0 if it is a zero number and 1 if it is positive.",
        "SQRT": "Returns the square root of the specified number.",
        "SUBTRACT": "Returns the result of the subtraction of the specified numbers.",
        "SUM": "Returns the result of the sum of the specified numbers.",
        "UNEQUAL": "Returns true if the specified numbers aren't equal, else returns false."
      },
      "TEXT": {
        "CONCAT": "Returns the concatenation of the specified texts.",
        "EXACT": "Returns true if the specified texts are equal, else returns false.",
        "FIND": "Returns the position of the first occurrence of the searched text inside the other text, or 0 if the searched text is not included in the other one.",
        "LEFT": "Returns the first characters of the text.",
        "LEN": "Returns the length of the text.",
        "LOWER": "Returns a lowercase copy of the text",
        "MID": "Returns a specific number of characters from a given position of the specified text.",
        "REPLACE": "Returns a copy of the original text in which a specific number of characters are replaced by a pattern from a given position.",
        "REPT": "Returns a text containing a specific number of times the original text.",
        "RIGHT": "Returns the last characters of the text.",
        "SUBSTITUTE": "Returns a copy of the original text in which a pattern is replaced by a newer one.",
        "TEXTJOIN": "Returns the concatenation of the specified texts, separated by a given separator.",
        "TRIM": "Returns a copy of the original text without any spaces at the starting and the ending.",
        "UPPER": "Returns an uppercase copy of the text."
      }
    }
  },
  "error": {
    "basic": "An error has occurred.",
    "http": {
      "undefined": "Unknown error",
      "400": "Bad request",
      "401": "Access not granted",
      "403": "Access forbidden",
      "404": "Not found",
      "405": "Not allowed",
      "406": "Not acceptable",
      "409": "Data Conflict",
      "429": "Maximum number of requests exceeded",
      "500": "An error occurredâ€¦"
    },
    "lck": {
      "ROW_DUPLICATE": "An error occurred when duplicating the row.",
      "ROW_DELETION": "An error occurred when deleting the row.",
      "ROW_SAVE": "An error occurred when saving the row.",
      "VIEW_LOCKED": "View is locked.",
      "VIEW_USED_IN_BLOCK": "View is still used in a block. Please remove the block first."
    },
    "cms": {
      "blockMultiConflictSummary": "Conflict at shared sources level",
      "blockMultiConflictDetail": "Some shared blocks sources in your page are simultaneously multi and mono items. Please fix it."
    },
    "impossibleOperation": "Impossible operation",
    "expiredToken": {
      "header": "Your session has expired",
      "message": "Please log in again to continue browsing the site."
    },
    "filters": {
      "viewIsLocked": "View is locked."
    }
  },
  "date": {
    "dateFormat": "MM/dd/yyyy",
    "dateFormatPrime": "mm/dd/yy",
    "datetimeFormat": "MM/dd/yyyy HH:mm",
    "datetimeLogFormat": "MM/dd/yyyy HH:mm:ss"
  },
  "localePrime": {
    "accept": "Yes",
    "reject": "No",
    "choose": "Choose",
    "upload": "Upload",
    "cancel": "Cancel",
    "firstDayOfWeek": 0,
    "dayNames": [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ],
    "dayNamesShort": [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ],
    "dayNamesMin": [
      "Su",
      "Mo",
      "Tu",
      "We",
      "Th",
      "Fr",
      "Sa"
    ],
    "monthNames": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    "monthNamesShort": [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    "today": "Today",
    "clear": "Clear",
    "dateFormat": "mm/dd/yy",
    "weekHeader": "Wk",
    "weak": "Weak",
    "medium": "Medium",
    "strong": "Strong",
    "passwordPrompt": "Enter a password"
  },
  "validations": {
    "fieldNames": {
      "loginForm": {
        "email": "@:components.loginForm.email",
        "password": "@:components.loginForm.password"
      },
      "lostPasswordForm": {
        "email": "@:components.lostPasswordForm.email"
      },
      "resetPasswordForm": {
        "password": "@:components.resetPasswordForm.password",
        "passwordCheck": "@:components.resetPasswordForm.passwordCheck"
      },
      "signUpForm": {
        "email": "@:components.signUpForm.email",
        "name": "@:components.signUpForm.name"
      }
    },
    "messages": {
      "required": "The field '{field}' is required.",
      "email": "The field '{field}' does not match the expected format (email).",
      "regex": "The field '{field}' does not match the expected format.",
      "passwordConfirm": "The field passwords in the '{field}' and '{target}' fields are not identical.",
      "isFalseOrOtherTrue": "The field '{field}' field can only be checked if the '{target}' field is also checked.",
      "minDate": "The field '{field}' must be after {fromDate}.",
      "dateValid": "The field '{field}' does not match the expected format.",
      "reference": "The field '{field}' value is invalid: please select an item from the list."
    }
  }
}
