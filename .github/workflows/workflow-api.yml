name: API CI

on:
  push:
    branches:
      - master
  pull_request:

  release:
    types: # This configuration does not affect the page_build event above
      - created

jobs:
  quality:

    runs-on: ubuntu-latest

    container: node:16

    env:
      LCK_PORT: 3030
      LCK_HOST: localhost
      LCK_DATABASE_URL_TEST: postgres://postgres:pouicpouic@lck-db:5432/postgres

      OBJECTION_DEBUG: 'false'
      NODE_ENV: test

      STORAGE_TYPE: fs
      STORAGE_PUBLIC_PATH: /storage
      STORAGE_FS_PATH: ../fs-storage
      STORAGE_S3_URL: http://lck-s3:9000
      STORAGE_S3_ACCESS_KEY: minio
      STORAGE_S3_SECRET_KEY: notsecret
      STORAGE_S3_PATH_STYLE: 1
      STORAGE_S3_SIGNATURE_VERSION: v4
      STORAGE_S3_DEFAULT_BUCKET: public

      NODE_OPTIONS: --max_old_space_size=4096

    services:
      lck-db:
        image: postgis/postgis:12-3.0
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pouicpouic

      lck-s3:
        image: minio/minio:latest
        env:
          MINIO_ACCESS_KEY: minio
          MINIO_SECRET_KEY: notsecret
        # options: server /data
    steps:
      - uses: actions/checkout@v2
      - name: NPM Version
        run: npm -v
      - name: Install dependencies
        run: npm ci --workspace=api && cp -r api/patch/** api/node_modules/
      - name: Lint code
        run: npm run lint --workspace=api
      - name: Unit tests
        run: npm test --workspace=api
        env:
          NODE_OPTIONS: --max_old_space_size=4096
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: api-quality-artifact
          path: |
            api/coverage

  build-lib:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: NPM Version
        run: npm -v
      - name: Install dependencies
        run: npm ci --workspace=api && cp -r api/patch/** api/node_modules/
      - name: Build API lib
        run: npm run compile --workspace=api
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: api-build-lib-artifact
          path: |
            api/lib

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: locokit/locokit:latest

  # build-docker:
  #   image: docker:stable
  #   stage: docker
  #   variables:
  #     IMAGE_VERSION: "latest"
  #     # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  #     DOCKER_HOST: tcp://docker:2375
  #     DOCKER_DRIVER: overlay2
  #     IMAGE_NAME: "${MC_REGISTRY}/${MC_REGISTRY_IMAGE}"
  #   services:
  #     - docker:dind
  #   needs: ["api-build-lib", "front-build", "docs-build"]
  #   before_script:
  #     - docker -v
  #     - docker info
  #     - echo "${MC_REGISTRY_PASSWORD}" | docker login -u ${MC_REGISTRY_USER} --password-stdin ${MC_REGISTRY}
  #     - docker pull $IMAGE_NAME:latest || true
  #   variables:
  #   script:
  #     - docker build --cache-from $IMAGE_NAME:latest --tag $IMAGE_NAME:$IMAGE_VERSION .
  #     - docker push $IMAGE_NAME:$IMAGE_VERSION

# api-build-docker-tagged:
#   extends: .api-docker-template
#   rules:
#     - if: '$CI_COMMIT_TAG != ""'
#       when: manual
#   variables:
#     IMAGE_VERSION: "${CI_COMMIT_TAG}"
#   script:
#     - docker build --cache-from $IMAGE_NAME:latest --tag $IMAGE_NAME:$IMAGE_VERSION --tag $IMAGE_NAME:latest .
#     - docker push $IMAGE_NAME:$IMAGE_VERSION
#     - docker push $IMAGE_NAME:latest

