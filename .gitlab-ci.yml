image: node:14

stages:
  - quality
  - build
  - deploy

.build_variables:
  variables: &build_variables
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    IMAGE_NAME: "${MC_REGISTRY}/${MC_REGISTRY_IMAGE}"
    FRONT_VERSION: 0.0.2-alpha.1
    GITLAB_ACCESS_TOKEN: ${MC_GITLAB_ACCESS_TOKEN}
    FRONT_DOWNLOAD_URL: "https://gitlab.makina-corpus.net/api/v4/projects/1428/jobs/artifacts/${FRONT_VERSION}/download?job=build"
    FRONT_FILE_PATH: "lck-front-${FRONT_VERSION}.zip"

.build_template: &build_definition
  image: docker:stable
  tags: [shared-ci-docker]
  stage: build
  services:
    - docker:dind
  before_script:
    - docker -v
    - docker info
    - echo "${MC_REGISTRY_PASSWORD}" | docker login -u ${MC_REGISTRY_USER} --password-stdin ${MC_REGISTRY}
    - docker pull $IMAGE_NAME:latest || true
    - wget --header="PRIVATE-TOKEN:${GITLAB_ACCESS_TOKEN}" ${FRONT_DOWNLOAD_URL} -O ${FRONT_FILE_PATH}
    - ls -al
    - unzip ${FRONT_FILE_PATH}

test:
  image: node:14
  tags: [shared-ci-docker]
  stage: quality
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: pouicpouic
  services:
    - postgis/postgis:12-3.0
  script:
    - npm ci
    - npm run migrate:latest
    - npm test

build-docker:
  <<: *build_definition
  except:
    - tags
  variables:
    <<: *build_variables
    IMAGE_VERSION: "${CI_COMMIT_SHORT_SHA}"
  script:
    - docker build --cache-from $IMAGE_NAME:latest --tag $IMAGE_NAME:$IMAGE_VERSION .
    - docker push $IMAGE_NAME:$IMAGE_VERSION

build-docker-tagged:
  <<: *build_definition
  only:
    - tags
  variables:
    <<: *build_variables
    IMAGE_VERSION: "${CI_COMMIT_TAG}"
  script:
    - docker build --cache-from $IMAGE_NAME:latest --tag $IMAGE_NAME:$IMAGE_VERSION --tag $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$IMAGE_VERSION
    - docker push $IMAGE_NAME:latest
